%{
use 5.010;
use strict;
use warnings;

use POMP::Sub;
use POMP::Indent;
use POMP::Clause;
use POMP::Reduction;

our @POMP_subs;
our %POMP_reductions;
our %counts;


# Default reduction operators
$POMP_reductions{'+'} = POMP::Reduction->new(
	0, sub {
		my ($accumulator, $refs_list) = @_;
		return "$accumulator += \$\$_ for ($refs_list);";
	}
);

$POMP_reductions{'-'} = POMP::Reduction->new(
	0, sub {
		my ($accumulator, $refs_list) = @_;
		return "$accumulator -= \$\$_ for ($refs_list);";
	}
);

$POMP_reductions{'*'} = POMP::Reduction->new(
	1, sub {
		my ($accumulator, $refs_list) = @_;
		return "$accumulator *= \$\$_ for ($refs_list);";
	}
);

$POMP_reductions{'push'} = POMP::Reduction->new(
	'()', sub {
		my ($accumulator, $refs_list) = @_;
		return "push $accumulator, map { \@\$_ } $refs_list;";
	}
);

%}

%token FOR
%token PARALLEL

%token IF
%token SHARED
%token PRIVATE
%token REDUCTION
%token FIRSTPRIVATE
%token COLON
%token COMMA
%token VAR
%token SYMBOLOP
%token WORD

%token CODE
%token CODE_START
%token UNHANDLED_CODE

%token PERL_FOREACH

%%

jobs: 
	| jobs job
	;
	
job:
	  UNHANDLED_CODE {
		  print $_[1];
	  }

	| directive clauses CODE_START declaration CODE {
		  my $directive   = $_[1];
		  my $clauses_ref = $_[2];
		  my $declaration = $_[4];
		  my $code        = $_[5];

		  # for directives must have a list declaration
		  if ($directive eq "for" && !defined $declaration) {
			  $_[0]->YYError;
		  }

		  # directive count
		  ++$counts{$directive};

		  my $subname = $directive . $counts{$directive};
		  my $sub = POMP::Sub->new($subname, $code);

		  push @POMP_subs, $sub;

		  $sub->add_shared      (@{$clauses_ref->{SHARED}      });
		  $sub->add_private     (@{$clauses_ref->{PRIVATE}     });
		  $sub->add_firstprivate(@{$clauses_ref->{FIRSTPRIVATE}});

		  while (my ($operator, $reduction) = each %POMP_reductions) {
			  for (@{ $clauses_ref->{"REDUCTION$operator"} }) {
				  $sub->add_reduction($_, $reduction);
			  }
		  }

		  if ($directive eq "for") {
			  $sub->add_foreach(@$declaration);
		  }

		  if (my $cond = $clauses_ref->{IF}) {
			  print POMP::Clause::gen_if(
				  $cond,
				  $sub->gen_call($subname)
			  );
		  } else {
			  print $sub->gen_call($subname);
		  }
	  }
	;

directive:
	  PARALLEL { "parallel"; }
	| FOR      { "for"; }
	;

clauses:
	                  { {}; }  # empty
	| clauses clause  {
	      while (my ($key, $val) = each %{$_[2]}) {
			  push @{ $_[1]->{$key} }, @$val if ($val);
		  }
		  $_[1];
	  }
	;

clause:
	  IF LPAREN VAR RPAREN {
		  return { 'IF' => $_[3] };
	  }
	| SHARED LPAREN varlist RPAREN {
	      return { 'SHARED'  => $_[3] };
	  }
	| PRIVATE LPAREN varlist RPAREN {
		  return { 'PRIVATE' => $_[3] };
	  }
	| FIRSTPRIVATE LPAREN varlist RPAREN {
		  return { 'FIRSTPRIVATE' => $_[3] };
	  }
	| REDUCTION LPAREN operator COLON varlist RPAREN {
		  my $operator = $_[3];
		  unless (exists $POMP_reductions{$operator}) {
			  die "Reduction for operator '$operator' wasn't defined";
		  }
		  my $key = "REDUCTION" . $operator;
		  return { $key => $_[5] };
	  }
	;

declaration:
	  # empty
	| PERL_FOREACH
	;

varlist:
	  # empty
	| vars
	;

vars:
	  vars COMMA VAR {
		  push @{ $_[1] }, $_[3];
		  $_[1];
	  }
	| VAR {
		  [ $_[1] ];
	  }
	;

operator:
	  SYMBOLOP
	| WORD
	;

%%

use Text::Balanced qw(extract_codeblock);

my $began = 0;
my $is_parsing = 0;

my $word_re   = qr/\w[\w\d]*/;
my $var_re    = qr/[\$%@]$word_re/;
my $scalar_re = qr/\$\w[\w\d]*/;
my $list_re   = qr/@\w[\w\d]*/;
my $cond_re   = $var_re; # may be a variable only

sub lex {
	my $data = \$_[0]->YYData->{DATA};

	# sanity check
	die "Sanity check failed" if ($began && !$is_parsing);

	# nothing else to read
	return ('', undef) unless (length $$data);

	if (!$is_parsing) {
		# No command being parsed, look for new directives
		if ($$data =~ s/^#pomp_for//) {
			$is_parsing = 1;
			return ('FOR', undef);
		}

		if ($$data =~ s/^#pomp_parallel//) {
			$is_parsing = 1;
			return ('PARALLEL', undef);
		}

		if ($$data =~ s/^#pomp_declare//) {
			$is_parsing = 1;
			return ('DECLARE', undef);
		}

		if ($$data =~ s/^(#.*)//) {
			# looks like a regular comment, skip til EOL
			return ('UNHANDLED_CODE', $1);
		}

		if ($$data =~ s/(.+)#/#/s) {
			# looks like code we don't need to handle: skip till next '#'
			return ('UNHANDLED_CODE', $1);
		}

		# no more '#', skip the rest of the file
		my $ret = $$data;
		$$data = "";
		return ('UNHANDLED_CODE', $ret);
	}

	else {
		# We are in the middle of parsing a command.

		# handle multiline directives
		1 while ($$data =~ s/^\n[ \t]*#[ \t]*//);

		# remove leading spaces when parsing a POMP command
		$$data =~ s/^[ \t]*//;

		# detect end of pomp command
		if ($$data =~ s/^\n(\s*[^#])/$1/) {
			$began = 1;
			return ('CODE_START', undef);
		}


		## Perl syntax subset
		if ($began) {
			# foreach(list expr)
			if ($$data =~ s/
				^for(?:each)? \s+           # for or foreach
				(?:my \s+ ($var_re))? \s*   # my $var
				\(/(/x
			) {
				my $list_expr = substr(extract_codeblock($$data, "("), 1, -1);
				return ('PERL_FOREACH', [$1, $list_expr]);
			}

			# code blocks
			if ($$data =~ /^{/) {
				$began = 0;
				$is_parsing = 0;

				# extract code block
				my $code_block = substr(extract_codeblock($$data, "{"), 1, -1);

				# remove first line break if any
				$code_block =~ s/^\s*?\n//s;

				# re-indent and return the result
				return ('CODE', POMP::Indent::reindent($code_block));
			}

			$$data =~ s/(.)//;
			return $1;
		}

		## Clauses
		else {
			if ($$data =~ s/^if//) {
				return ('IF', undef);
			}

			if ($$data =~ s/^shared//) {
				return ('SHARED', undef);
			}

			if ($$data =~ s/^private//) {
				return ('PRIVATE', undef);
			}

			if ($$data =~ s/^firstprivate//) {
				return ('FIRSTPRIVATE', undef);
			}

			if ($$data =~ s/^reduction//) {
				return ('REDUCTION', undef);
			}

			if ($$data =~ s/^,//) {
				return ('COMMA', undef);
			}

			if ($$data =~ s/^://) {
				return ('COLON', undef);
			}

			if ($$data =~ s/^\(//) {
				return ('LPAREN', undef);
			}

			if ($$data =~ s/^\)//) {
				return ('RPAREN', undef);
			}

			if ($$data =~ s/^($var_re)//) {
				return ('VAR', $1);
			}

			if ($$data =~ s/^($word_re)//) {
				return ('WORD', $1);
			}

			if ($$data =~ s/^([^\d\w:,]{1,2})//) {
				return ('SYMBOLOP', $1);
			}

			$$data =~ s/(.)//;
			return $1;
		}
	}
}

sub error {
	my ($parser_ref, $error) = @_;
	my $data = \$parser_ref->YYData->{DATA};
	print "Error: $error\n" if ($error);
	#print "Error Around: '" . ($$data =~ s/(.*?)\n/$1/rs) . "'\n";
}
